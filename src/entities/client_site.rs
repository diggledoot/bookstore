//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "client_site")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub index_well_url: Option<String>,
    pub username: Option<String>,
    pub password: Option<String>,
    pub is_indexed: Option<i8>,
    pub is_indexing: Option<i8>,
    pub last_indexed_at: Option<DateTime>,
    pub total_to_index: Option<i32>,
    pub total_indexed: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::well_discovery::Entity")]
    WellDiscovery,
    #[sea_orm(has_many = "super::well_discovery_config::Entity")]
    WellDiscoveryConfig,
}

impl Related<super::well_discovery::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WellDiscovery.def()
    }
}

impl Related<super::well_discovery_config::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WellDiscoveryConfig.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
